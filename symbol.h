#ifndef AST_H 
#define AST_H 

typedef enum symbol {
    SYM_TRANSLATION_UNIT = 0,
    SYM_EXTERNAL_DECLARATION,
    SYM_FUNCTION_DEFINITION,
    SYM_DECLARATION_SPECIFIER,
    SYM_STORAGE_CLASS_SPECIFIER,
    SYM_TYPE_SPECIFIER,
    SYM_STRUCT_OR_UNION_SPECIFIER,
    SYM_STRUCT_OR_UNION,
    SYM_STRUCT_DECLARATION,
    SYM_SPECIFIER_QUALIFIER,
    SYM_STRUCT_DECLARATOR_LIST,
    SYM_STRUCT_DECLARATOR,
    SYM_DECLARATOR,
    SYM_POINTER,
    SYM_TYPE_QUALIFIER,
    SYM_DIRECT_DECLARATOR,
    SYM_CONSTANT_EXPRESSION,
    SYM_CONDITIONAL_EXPRESSION,
    SYM_LOGICAL_OR_EXPRESSION,
    SYM_LOGICAL_AND_EXPRESSION,
    SYM_INCLUSIVE_OR_EXPRESSION,
    SYM_EXCLUSIVE_OR_EXPRESSION,
    SYM_AND_EXPRESSION,
    SYM_EQUALITY_EXPRESSION,
    SYM_RELATIONAL_EXPRESSION,
    SYM_SHIFT_EXPRESSION,
    SYM_ADDITIVE_EXPRESSION,
    SYM_MULTIPLICATIVE_EXPRESSION,
    SYM_CAST_EXPRESSION,
    SYM_UNARY_EXPRESSION,
    SYM_POSTFIX_EXPRESSION,
    SYM_PRIMARY_EXPRESSION,
    SYM_CONSTANT,
    SYM_EXPRESSION,
    SYM_ASSIGNMENT_EXPRESSION,
    SYM_ASSIGNMENT_OPERATOR,
    SYM_UNARY_OPERATOR,
    SYM_TYPE_NAME,
    SYM_PARAMETER_TYPE_LIST,
    SYM_PARAMETER_LIST,
    SYM_PARAMETER_DECLARATION,
    SYM_ABSTRACT_DECLARATOR,
    SYM_DIRECT_ABSTRACT_DECLARATOR,
    SYM_ENUM_SPECIFIER,
    SYM_ENUMERATOR_LIST,
    SYM_ENUMERATOR,
    SYM_TYPEDEF_NAME,
    SYM_DECLARATION,
    SYM_INIT_DECLARATOR,
    SYM_INITIALIZER,
    SYM_INITIALIZER_LIST,
    SYM_COMPOUND_STATEMENT,
    SYM_STATEMENT,
    SYM_LABELED_STATEMENT,
    SYM_EXPRESSION_STATEMENT,
    SYM_SELECTION_STATEMENT,
    SYM_ITERATION_STATEMENT,
    SYM_JUMP_STATEMENT,
    SYM_CNT,
} symbol_t;

typedef struct ast_

typedef struct ast {
    union {
        
    }; 
    symbol_t type;
} ast_t

#endif
